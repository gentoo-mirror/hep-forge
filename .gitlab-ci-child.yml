stages:
  - checksingle
  - build
  - test
  - qa
  - checkall

variables:
  REPO_NAME: "hep-forge"

default:
  image: apnpucky/gentoo-hep-forge:latest

.config:
  tags:
    - $ARCH
  before_script:
    - mkdir /var/db/repos/apn && printf "[apn]\nlocation = /var/db/repos/apn\nsync-type = git\nsync-uri = https://gitlab.com/APN-Pucky/gentoo-apn.git" >> /etc/portage/repos.conf/apn.conf && emaint -r apn sync
    - echo '*/*::apn * ~*' > /etc/portage/package.accept_keywords/apn
    - emerge --sync || emaint -r ${REPO_NAME} sync
    - emerge app-eselect/eselect-repository
    - eselect repository enable science && emaint -r science sync
    - pushd /var/db/repos/${REPO_NAME} && git remote set-branches origin '*' && git fetch -v --depth=1 && git pull --unshallow && git checkout ${CI_COMMIT_SHA} && popd
    - ACCEPT_KEYWORDS="~*" emerge -q '>=app-portage/pkg-testing-tools-0.2.0'
    - echo 'dev-util/hermes ~*' >> /etc/portage/package.accept_keywords/zz-autoaccept
    - echo 'dev-python/uncertainties ~*' >> /etc/portage/package.accept_keywords/zz-autoaccept
    - echo 'dev-python/toposort ~*' >> /etc/portage/package.accept_keywords/zz-autoaccept
    - echo 'sci-physics/root ~*' >> /etc/portage/package.accept_keywords/zz-autoaccept
    - echo "*/*::${REPO_NAME} ~*" > /etc/portage/package.accept_keywords/${REPO_NAME}
    - echo '>=media-libs/libafterimage-1.20-r6 png gif tiff jpeg' >> /etc/portage/package.use/root
    - echo "=$CATEGORY/$PKG-$VERSION*::${REPO_NAME} **" >> /etc/portage/package.accept_keywords/${REPO_NAME}

.configall:
  rules:
    - changes:
        - "$CATEGORY/$PKG/$PKG-$VERSION*.ebuild"
        - "$CATEGORY/$PKG/metadata.xml"
        - "$CATEGORY/$PKG/Manifest"
        - "$CATEGORY/$PKG/files/*"
        - "$CATEGORY/$PKG/.build"
        - ".build"

.config:
  rules:
    - if: $ARCH == "amd64"
      changes:
        - "$CATEGORY/$PKG/$PKG-$VERSION*.ebuild"
        - "$CATEGORY/$PKG/metadata.xml"
        - "$CATEGORY/$PKG/Manifest"
        - "$CATEGORY/$PKG/files/*"
        - "$CATEGORY/$PKG/.build"
        - ".build"

local-pkgcheck:
  image: apnpucky/gentoo-ebuild-ci
  stage: checkall
  tags:
    - amd64
  before_script: 
    - emerge app-eselect/eselect-repository
    - eselect repository enable science && emaint -r science sync
  script:
    - pkgcheck scan --exit --quiet
  allow_failure: true

global-pkgcheck:
  image: apnpucky/gentoo-ebuild-ci
  stage: checkall
  tags:
    - amd64
  before_script:
    - emerge app-eselect/eselect-repository
    - eselect repository enable science && emaint -r science sync
    - echo '*/*::science ~*' > /etc/portage/package.accept_keywords/science
    - echo "[${REPO_NAME}]">> /etc/portage/repos.conf/${REPO_NAME}.conf
    - echo "location = /var/db/repos/${REPO_NAME}" >> /etc/portage/repos.conf/${REPO_NAME}.conf
    - echo "sync-type = git" >> /etc/portage/repos.conf/${REPO_NAME}.conf
    - echo "sync-uri = https://gitlab.com/APN-Pucky/gentoo-${REPO_NAME}.git" >> /etc/portage/repos.conf/${REPO_NAME}.conf
    - emaint -r ${REPO_NAME} sync
    - pushd /var/db/repos/${REPO_NAME} && git remote set-branches origin '*' && git fetch -v --depth=1 && git pull --unshallow && git checkout ${CI_COMMIT_SHA} && popd
  script:
    - pkgcheck ci -r ${REPO_NAME} --exit --quiet
  allow_failure: true

.check:
  image: apnpucky/gentoo-ebuild-ci
  extends: .config
  tags:
    - amd64
  stage: checksingle
  before_script: 
    - emerge app-eselect/eselect-repository
    - eselect repository enable science && emaint -r science sync
  script:
    - pkgcheck scan "=$CATEGORY/$PKG-$VERSION*::${REPO_NAME}" --exit

.warn:
  image: apnpucky/gentoo-ebuild-ci
  extends: .config
  tags:
    - amd64
  stage: checksingle
  before_script:
    - emerge app-eselect/eselect-repository
    - eselect repository enable science && emaint -r science sync
  script:
    - pkgcheck scan "=$CATEGORY/$PKG-$VERSION*::${REPO_NAME}" --exit warning || exit 137
  allow_failure:
    exit_codes: 137

.build:
  stage: build
  needs: []
  extends: .configall
  script:
    - USE="-root" emerge "=$CATEGORY/$PKG-$VERSION*::${REPO_NAME}" --autounmask=y --autounmask-write --autounmask-continue --autounmask-use=y 2>&1 | tee "build_$CATEGORY_$PKG-$VERSION.log";
  artifacts:
    when: always
    paths:
      - "build_*.log"
    expire_in: 1 week

.test:
  stage: test
  needs: []
  extends: .configall
  script:
    - if [[ -n $PROBABILITY ]] && [[ $(( RANDOM % 101 )) -gt $PROBABILITY ]] ; then exit 137 ; fi
    - if grep -Fq "python-single-r1" $CATEGORY/$PKG/$PKG-$VERSION*.ebuild;
      then
      inherit() { sleep 0; } &&
      source $CATEGORY/$PKG/$PKG-$VERSION*.ebuild &&
      for PY in ${PYTHON_COMPAT[@]}; do
      echo "Testing single python $PY" &&
      PYTHON_SINGLE_TARGET="$PY" pkg-testing-tool --append-emerge "--autounmask=y --autounmask-write --autounmask-continue --autounmask-use=y" --max-use-combinations 32 --ccache --extra-env-file 'test.conf' --test-feature-scope always --append-required-use "^^ ( python_single_target_python3_11 python_single_target_python3_10 ) python_single_target_$PY -root" -p "~$CATEGORY/$PKG-$VERSION::${REPO_NAME}" --report test_$CATEGORY_$PKG-$VERSION-$PY.json 2>&1 | tee -a test_$CATEGORY_$PKG-$VERSION-$PY.log ;
      done;
      else
      if grep -Fq "lua-single" $CATEGORY/$PKG/$PKG-$VERSION*.ebuild;
      then
      inherit() { sleep 0; } &&
      source $CATEGORY/$PKG/$PKG-$VERSION*.ebuild &&
      for LUA in ${LUA_COMPAT[@]}; do
      if [ "$LUA" != "lua5-2" ]; then
      echo "Testing single lua $LUA" &&
      LUA_SINGLE_TARGET="$LUA" pkg-testing-tool --append-emerge "--autounmask=y --autounmask-write --autounmask-continue --autounmask-use=y" --max-use-combinations 32 --ccache --extra-env-file 'test.conf' --test-feature-scope always --append-required-use "^^ ( lua_single_target_lua5-1 lua_single_target_lua5-3 lua_single_target_lua5-4 ) lua_single_target_$LUA -root" -p "~$CATEGORY/$PKG-$VERSION::${REPO_NAME}" --report test_$CATEGORY_$PKG-$VERSION-$LUA.json 2>&1 | tee -a test_$CATEGORY_$PKG-$VERSION-$LUA.log ;
      fi
      done;
      else
      echo "Non single test" &&
      pkg-testing-tool --append-emerge "--autounmask=y --autounmask-write --autounmask-continue --autounmask-use=y" --max-use-combinations 32 --ccache --extra-env-file 'test.conf' --append-required-use "!root" --test-feature-scope always -p "~$CATEGORY/$PKG-$VERSION::${REPO_NAME}" --report test_$CATEGORY_$PKG-$VERSION.json 2>&1 | tee "test_$CATEGORY_$PKG-$VERSION.log";
      fi
      fi
  artifacts:
    when: always
    paths:
      - "test_*.log"
      - "test*.json"
    expire_in: 1 week
  allow_failure:
    exit_codes: 137

.qa:
  stage: qa
  extends: .config
  script:
    - ls *.log
    - (! grep -A10 -B10 "QA Notice" test_$CATEGORY_$PKG-$VERSION*.log)
  allow_failure: true

